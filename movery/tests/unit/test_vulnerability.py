import unittest
import os
import json
import tempfile
import shutil
import ast
from movery.detectors.vulnerability import VulnerabilityDetector, Signature, VulnerabilityMatch

class TestVulnerabilityDetector(unittest.TestCase):
    def setUp(self):
        """测试前的准备工作"""
        self.detector = VulnerabilityDetector()
        self.test_dir = tempfile.mkdtemp()
        
        # 创建测试签名文件
        self.signatures = {
            "signatures": [
                {
                    "id": "CMD001",
                    "name": "命令注入",
                    "severity": "high",
                    "code_patterns": [
                        "os\\.system\\([^)]*\\)",
                        "subprocess\\.call\\([^)]*\\)"
                    ]
                },
                {
                    "id": "SQL001",
                    "name": "SQL注入",
                    "severity": "high",
                    "code_patterns": [
                        "execute\\(['\"][^'\"]*%[^'\"]*['\"]\\)",
                        "executemany\\(['\"][^'\"]*%[^'\"]*['\"]\\)"
                    ]
                }
            ]
        }
        
        self.signature_file = os.path.join(self.test_dir, "signatures.json")
        with open(self.signature_file, "w") as f:
            json.dump(self.signatures, f)
            
        # 创建测试代码文件
        self.test_code = '''
import os
import subprocess

def unsafe_command():
    cmd = "ls -l"
    os.system(cmd)
    subprocess.call(["echo", "hello"])

def unsafe_sql():
    query = "SELECT * FROM users WHERE id = %s"
    cursor.execute(query % user_id)
'''
        self.test_file = os.path.join(self.test_dir, "test_code.py")
        with open(self.test_file, "w") as f:
            f.write(self.test_code)

    def tearDown(self):
        """测试后的清理工作"""
        shutil.rmtree(self.test_dir)

    def test_load_signatures(self):
        """测试加载签名文件"""
        self.detector.load_signatures(self.signature_file)
        
        self.assertEqual(len(self.detector.signatures), 2)
        self.assertEqual(self.detector.signatures[0].id, "CMD001")
        self.assertEqual(self.detector.signatures[0].name, "命令注入")
        self.assertEqual(len(self.detector.signatures[0].code_patterns), 2)

    def test_detect_file(self):
        """测试文件漏洞检测"""
        self.detector.load_signatures(self.signature_file)
        matches = self.detector.detect_file(self.test_file)
        
        self.assertGreater(len(matches), 0)
        for match in matches:
            self.assertIsInstance(match, VulnerabilityMatch)
            self.assertIsInstance(match.signature, Signature)
            self.assertGreater(match.confidence, 0.7)

    def test_analyze_ast(self):
        """测试AST分析"""
        self.detector.load_signatures(self.signature_file)
        with open(self.test_file, 'r') as f:
            tree = ast.parse(f.read())
        matches = self.detector.analyze_ast(tree)
        
        self.assertGreater(len(matches), 0)
        for match in matches:
            self.assertIsInstance(match, VulnerabilityMatch)
            self.assertGreater(match.line_number, 0)

    def test_detect_similar_patterns(self):
        """测试相似模式检测"""
        similar_code = '''
import os
import subprocess

def custom_system(cmd):
    os.system(cmd)  # 直接模式
    
def modified_system(command):
    os.system(command)  # 相似模式
'''
        similar_file = os.path.join(self.test_dir, "similar_code.py")
        with open(similar_file, "w") as f:
            f.write(similar_code)
            
        self.detector.load_signatures(self.signature_file)
        matches = self.detector.detect_similar_patterns(similar_code)
        
        self.assertGreater(len(matches), 0)
        for match in matches:
            self.assertIsInstance(match, VulnerabilityMatch)
            self.assertGreater(match.confidence, 0.8)

    def test_calculate_confidence(self):
        """测试置信度计算"""
        test_cases = [
            ("os.system('ls')", r"os\.system\([^)]*\)", 0.8),
            ("subprocess.call(['ls'])", r"subprocess\.call\([^)]*\)", 0.9),
            ("import os; os.system('ls')", r"os\.system\([^)]*\)", 1.0)
        ]
        
        for code, pattern, expected in test_cases:
            confidence = self.detector._calculate_confidence(code, pattern)
            self.assertGreaterEqual(confidence, expected)
            self.assertLessEqual(confidence, 1.0)

    def test_calculate_similarity(self):
        """测试相似度计算"""
        test_cases = [
            ("os.system", "os.system", 1.0),
            ("os.system", "subprocess.system", 0.5),
            ("execute", "executemany", 0.7)
        ]
        
        for str1, str2, expected in test_cases:
            similarity = self.detector._calculate_similarity(str1, str2)
            self.assertGreaterEqual(similarity, expected - 0.1)
            self.assertLessEqual(similarity, 1.0)

if __name__ == '__main__':
    unittest.main() 